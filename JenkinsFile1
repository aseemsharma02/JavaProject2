def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

pipeline {
    agent any
    tools {
       maven 'M2_HOME'
    }
    environment {
    registry = '467864354237.dkr.ecr.us-east-1.amazonaws.com/dockerimage'
    registryCredentials = 'Jenkins-ECR-login-credential'
    dockerImage = ''
    }
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
                echo 'Hiya World Now'
            }
        }
        stage ('checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/aseemsharma02/JavaProject2.git']]])
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package'                   
                }
        }
    ////   stage('SonarQube') {
        //    steps {
        //  script{
        //    withSonarQubeEnv(installationName: 'SonarScannerAWS', credentialsId: 'AWS_Sonar_Server_Token') {
        //    sh 'mvn sonar:sonar'
        //    //sh 'mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=JavaProject-2'
        //    }
        //    waitForQualityGate abortPipeline: false, credentialsId: 'AWS_Sonar_Server_Token'
        //          }
        //          }
        //  }
        //   stage('Quality Gate'){
        //   steps {
        //   script {
        //  timeout(time: 1, unit: 'HOURS') {
        //      def qg = waitForQualityGate()
        //      if (qg.status != 'OK') {
        //          error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //      }
        //    }
        //   }
        //   }
        //  }         
            stage ('Building Docker Image') {
            steps {
            script {
            dockerImage = docker.build registry + ":$BUILD_NUMBER"
                        }
                    }
                }
            stage ('Deploy the image to AWS ECR'){
            steps {
            script {
            docker.withRegistry("https://" + registry, "ecr:us-east-1:" + registryCredentials) {
            dockerImage.push()
                        }
                    }
                  }
               }
            }
          
    post {  
     always {  
         echo 'Build Started'  
     }  
     success {  
         slackSend ( channel: "#jenkins-feedback", token: "Slack-Token", color: COLOR_MAP[currentBuild.currentResult], message: "Job: *${env.JOB_NAME}, build #${env.BUILD_NUMBER}* is *`${currentBuild.currentResult}`* \nRun in ${currentBuild.durationString} - <${env.BUILD_URL}|Go to this job>")
          echo 'Build successful'
     }  
     failure {  
         //mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "foo@foomail.com";  
         slackSend ( channel: "#jenkins-feedback", token: "Slack-Token", color: COLOR_MAP[currentBuild.currentResult], message: "Job: *${env.JOB_NAME}, build #${env.BUILD_NUMBER}* is *`${currentBuild.currentResult}`* \nRun in ${currentBuild.durationString} - <${env.BUILD_URL}|Go to this job>")
          echo 'Build failure'
    }  
     unstable {  
         echo 'Build unstable'
     }  
     changed {  
         echo 'This will run only if the state of the Pipeline has changed'  
         echo 'For example, if the Pipeline was previously failing but is now successful'  
     }  
 } 
  // slackSend( channel: "#jenkins-feedback", token: "Slack-Token", color: "green", message: "Build successful")
           
  }
